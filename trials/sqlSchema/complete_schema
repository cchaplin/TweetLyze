--
-- PostgreSQL database dump
--

-- Dumped from database version 9.3.4
-- Dumped by pg_dump version 9.3.4
-- Started on 2014-06-27 16:22:51 IST

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 181 (class 3079 OID 11791)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 2146 (class 0 OID 0)
-- Dependencies: 181
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 182 (class 3079 OID 237675)
-- Name: hstore; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS hstore WITH SCHEMA public;


--
-- TOC entry 2147 (class 0 OID 0)
-- Dependencies: 182
-- Name: EXTENSION hstore; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION hstore IS 'data type for storing sets of (key, value) pairs';


--
-- TOC entry 183 (class 3079 OID 24868)
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- TOC entry 2148 (class 0 OID 0)
-- Dependencies: 183
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


SET search_path = public, pg_catalog;

--
-- TOC entry 262 (class 1255 OID 238801)
-- Name: disintegrate_tweets(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION disintegrate_tweets(trend_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	insert into organized_tweets
	select distinct t3.id as "id",t3.geo as "geo",t3.retweeted as "retweeted",
	t3.in_reply_to_screen_name as "in_reply_to_screen_name",t3.truncated as "truncated"
	,t3.source as "source",t3.created_at as "created_at",t3.place as "place"
	,t3.user_id as "user_id",
	t3.text as "text",t3.hashtags as "hashtags",t3.user_mentions as "user_mentions",
	t3.retweet_count as "retweet_count",t3.favorite_count as "favorite_count",t3.trend_id as "trend_id"
	from 
		(select 
			json_extract_path_text(t2.jsonElements,'id') as "id",
			json_extract_path_text(t2.jsonElements,'geo') as "geo", 
			CAST (json_extract_path_text(t2.jsonElements,'retweeted') AS boolean) as "retweeted" , 
			json_extract_path_text(t2.jsonElements,'in_reply_to_screen_name') as "in_reply_to_screen_name",
			CAST (json_extract_path_text(t2.jsonElements,'truncated') as boolean) as "truncated",
			json_extract_path_text(t2.jsonElements,'source') as "source",
			CAST (json_extract_path_text(t2.jsonElements,'created_at') as date) as "created_at",
			json_extract_path_text(t2.jsonElements,'place') as "place",
			json_extract_path_text(json_extract_path(t2.jsonElements,'user'),'id') as "user_id",
			json_extract_path_text(t2.jsonElements,'text') as "text",
			json_extract_path_text(json_extract_path(t2.jsonElements,'entities'),'hashtags') as "hashtags",
			json_extract_path_text(json_extract_path(t2.jsonElements,'entities'),'user_mentions') as "user_mentions",
			CAST (json_extract_path_text(t2.jsonElements,'retweet_count') as integer) as "retweet_count",
			CAST (json_extract_path_text(t2.jsonElements,'favorite_count') as integer) as "favorite_count",
			t2.trendId as "trend_id"
			from
				(select json_array_elements(t1.tweets) as jsonElements,t1.trendId as trendId 
					from
					(select tweets,trendId from tweets where trendId = trend_id )as t1)as t2)as t3;

END;
$$;


ALTER FUNCTION public.disintegrate_tweets(trend_id uuid) OWNER TO postgres;

--
-- TOC entry 206 (class 1255 OID 77213)
-- Name: traverse_json_objects(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION traverse_json_objects() RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE jsonObj json;
BEGIN


FOR jsonObj IN 
SELECT  json_array_elements(t1.tweets) as s1 
FROM (select tweets from tweets limit 1)as t1

LOOP 
	Select jsonObj;

END LOOP;

END;

$$;


ALTER FUNCTION public.traverse_json_objects() OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 178 (class 1259 OID 214221)
-- Name: id_entity; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE id_entity (
    id character varying(1000),
    entity character varying(1000),
    trend character varying(200)
);


ALTER TABLE public.id_entity OWNER TO postgres;

--
-- TOC entry 172 (class 1259 OID 24879)
-- Name: location; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE location (
    id character varying(40) NOT NULL,
    city character varying(60)
);


ALTER TABLE public.location OWNER TO postgres;

--
-- TOC entry 2149 (class 0 OID 0)
-- Dependencies: 172
-- Name: COLUMN location.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN location.id IS 'Location Id for a city by yahoo.';


--
-- TOC entry 177 (class 1259 OID 214205)
-- Name: organized_tweets; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE organized_tweets (
    id character varying(1000) NOT NULL,
    geo character varying(300),
    retweeted boolean,
    in_reply_to_screen_name character varying(500),
    truncated boolean,
    source character varying(500),
    created_at date,
    place character varying(500),
    user_id character varying(200),
    text character varying(1000),
    entities text,
    user_mentions text,
    retweet_count integer,
    favorite_count integer,
    trend character varying(500),
    location_id character varying(40)
);


ALTER TABLE public.organized_tweets OWNER TO postgres;

--
-- TOC entry 180 (class 1259 OID 264533)
-- Name: sentiments; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sentiments (
    id character varying(1000) NOT NULL,
    sentiment character varying(10),
    pos_sentiment double precision,
    neg_sentiment double precision
);


ALTER TABLE public.sentiments OWNER TO postgres;

--
-- TOC entry 173 (class 1259 OID 24882)
-- Name: trends; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE trends (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    trend character varying,
    date date,
    locationid character varying(40)
);


ALTER TABLE public.trends OWNER TO postgres;

--
-- TOC entry 2150 (class 0 OID 0)
-- Dependencies: 173
-- Name: TABLE trends; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE trends IS 'Holdes the trends for a location wrt to time';


--
-- TOC entry 2151 (class 0 OID 0)
-- Dependencies: 173
-- Name: COLUMN trends.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN trends.id IS 'uuid , can be used to shard later';


--
-- TOC entry 174 (class 1259 OID 24889)
-- Name: trendsbackup; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE trendsbackup (
    id uuid,
    trend character varying,
    date date,
    locationid character varying(40)
);


ALTER TABLE public.trendsbackup OWNER TO postgres;

--
-- TOC entry 175 (class 1259 OID 24895)
-- Name: tweets; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tweets (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    trendid uuid,
    tweets json
);


ALTER TABLE public.tweets OWNER TO postgres;

--
-- TOC entry 179 (class 1259 OID 230597)
-- Name: tweets_copy; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tweets_copy (
)
INHERITS (tweets);


ALTER TABLE public.tweets_copy OWNER TO postgres;

--
-- TOC entry 176 (class 1259 OID 26095)
-- Name: tweetsbackup; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tweetsbackup (
    id uuid,
    trendid uuid,
    tweets text
);


ALTER TABLE public.tweetsbackup OWNER TO postgres;

--
-- TOC entry 2014 (class 2604 OID 230600)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tweets_copy ALTER COLUMN id SET DEFAULT uuid_generate_v4();


--
-- TOC entry 2016 (class 2606 OID 25142)
-- Name: location_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY location
    ADD CONSTRAINT location_pkey PRIMARY KEY (id);


--
-- TOC entry 2025 (class 2606 OID 240015)
-- Name: organized_tweets_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY organized_tweets
    ADD CONSTRAINT organized_tweets_pkey PRIMARY KEY (id);


--
-- TOC entry 2029 (class 2606 OID 264540)
-- Name: sentiments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sentiments
    ADD CONSTRAINT sentiments_pkey PRIMARY KEY (id);


--
-- TOC entry 2019 (class 2606 OID 25144)
-- Name: trends_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY trends
    ADD CONSTRAINT trends_pkey PRIMARY KEY (id);


--
-- TOC entry 2021 (class 2606 OID 25146)
-- Name: tweets_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tweets
    ADD CONSTRAINT tweets_pkey PRIMARY KEY (id);


--
-- TOC entry 2017 (class 1259 OID 25147)
-- Name: fki_locationFK; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX "fki_locationFK" ON trends USING btree (locationid);


--
-- TOC entry 2026 (class 1259 OID 256343)
-- Name: id_entity_id_entity_trend_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_entity_id_entity_trend_idx ON id_entity USING btree (id, entity, trend);


--
-- TOC entry 2023 (class 1259 OID 240338)
-- Name: id_trend; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX id_trend ON organized_tweets USING btree (id, trend, location_id, created_at);


--
-- TOC entry 2027 (class 1259 OID 264541)
-- Name: sentiments_id_sentiment_pos_sentiment_neg_sentiment_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX sentiments_id_sentiment_pos_sentiment_neg_sentiment_idx ON sentiments USING btree (id, sentiment, pos_sentiment, neg_sentiment);


--
-- TOC entry 2022 (class 1259 OID 239956)
-- Name: tweetsbackup_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX tweetsbackup_index ON tweetsbackup USING btree (id, trendid);


--
-- TOC entry 2030 (class 2606 OID 25148)
-- Name: locationFK; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trends
    ADD CONSTRAINT "locationFK" FOREIGN KEY (locationid) REFERENCES location(id);


--
-- TOC entry 2031 (class 2606 OID 25153)
-- Name: tweets_trendid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tweets
    ADD CONSTRAINT tweets_trendid_fkey FOREIGN KEY (trendid) REFERENCES trends(id);


--
-- TOC entry 2145 (class 0 OID 0)
-- Dependencies: 6
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


-- Completed on 2014-06-27 16:22:51 IST

--
-- PostgreSQL database dump complete
--

